include:
  - component: $CI_SERVER_FQDN/biru/project-components/merge-branches@0.0.23
    inputs:
      dev-branch: main
      token: $DEV_TOKEN
  - component: $CI_SERVER_FQDN/biru/project-components/build-deploy@0.0.23
    inputs:
      project-name: tenzu
      application-name: front
      extra-file: $SENTRYCLIRC
      destination-extra-file: '.sentryclirc'
      build-arg: 'RELEASE_VERSION=$NEXT_VERSION CONFIGURATION=$CI_COMMIT_REF_SLUG PLUGIN_PATH=${PLUGIN_PATH} PLUGIN_GIT=${PLUGIN_GIT}'
  - component: $CI_SERVER_FQDN/biru/project-components/release@0.0.23
    inputs:
      token: $DEV_TOKEN

  # deploy demo
  - component: $CI_SERVER_FQDN/biru/component/build-and-push@v1.13.0
    inputs:
      stage: deploy-demo
      prefix: demo-
      build-arg: 'RELEASE_VERSION=$DEMO_VERSION CONFIGURATION=production PLUGIN_PATH=${PLUGIN_PATH} PLUGIN_GIT=${PLUGIN_GIT}'
      destination: ${CI_REGISTRY_IMAGE}:${DEMO_VERSION}
      needs:
        - job: launch-demo-deploy
      rules:
        - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE != /^chore\(release\).*-.*/ '
  # mirror
  - component: $CI_SERVER_FQDN/biru/component/push@v1.13.0
    inputs:
      repo: github.com/BIRU-Scop/tenzu-front.git
      fetch-args: "origin --no-tags"
  - component: $CI_SERVER_FQDN/biru/component/push@v1.13.0
    inputs:
      repo: github.com/BIRU-Scop/tenzu-front.git
      job-name: mirror-demo-tags
      push-args: "origin HEAD:refs/tags/$CI_COMMIT_REF_SLUG"
      fetch-args: "origin --no-tags"
      rules:
        - if: $CI_COMMIT_TAG =~ /^.*-demo.*/
  # test
  - component: $CI_SERVER_FQDN/biru/component/build-and-push@v1.13.0
    inputs:
      stage: test
      rules:
        - if: '$CI_COMMIT_REF_SLUG == $CI_DEFAULT_BRANCH'
        - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
      destination: ''
      prefix: test-
      extra-args: "--no-push"

stages:
  - test
  - release
  - build-deploy
  - mirror
  - merge
  - deploy-demo


launch-demo-deploy:
  stage: merge
  needs:
    - job: tag-and-changelog
  script:
    - DEMO_VERSION="${NEXT_VERSION//staging/demo}"
    - echo "DEMO_VERSION=$DEMO_VERSION" > demo.env
    - cat demo.env
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE != /^chore\(release\).*-.*/ '
      when: manual
  artifacts:
    reports:
      dotenv: demo.env

publish-demo-tag:
  stage: merge
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE != /^chore\(release\).*-.*/ '
  needs:
    - job: tag-and-changelog
    - job: launch-demo-deploy
  before_script:
    - git config --global user.email "bot@biru.sh"
    - git config --global user.name "${CI_PROJECT_TITLE}-bot"
    - git remote set-url origin https://oauth2:$DEV_TOKEN@${CI_SERVER_HOST}/${CI_PROJECT_PATH}
    - git fetch
  script:
    - git push origin HEAD:refs/tags/$DEMO_VERSION


deploy-demo:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE != /^chore\(release\).*-.*/ '
  variables:
    GIT_STRATEGY: none
    GIT_DISCOVERY_ACROSS_FILESYSTEM: 1
  needs:
    - job: launch-demo-deploy
    - job: demo-build-image-and-push
  before_script:
    - git clone https://oauth2:$DEPLOY_TOKEN@${CI_SERVER_HOST}/biru/sre/argocd -b main
    - cd argocd
    - git config --local user.email "bot@biru.sh"
    - git config --local user.name "Bot Biru"
    - git fetch --all
  script:
    # construct the values path with the inputs value
    - PROJECT_NAME="tenzu"
    - APP_NAME="front"
    - ENV_NAME="demo"
    - VALUES_FOLDER="values"
    - FILE="$VALUES_FOLDER/$PROJECT_NAME/$APP_NAME/values-$ENV_NAME.yaml"
    - echo $FILE $VALUE $DEMO_VERSION
    - yq -i ".image.tag=\"$DEMO_VERSION\"" "$FILE"
    - git add $FILE
    - git commit -m "deploy($PROJECT_NAME/$APP_NAME) $DEMO_VERSION on $ENV_NAME"
    - git push origin HEAD:main
  stage: deploy-demo
  environment:
    name: demo
